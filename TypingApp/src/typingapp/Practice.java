/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package typingapp;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask; 
import javax.swing.JFrame;
import javax.swing.text.html.HTMLEditorKit;

/**
 *
 * @author aaxxo
 */
public class Practice extends javax.swing.JFrame {
    public static int counter = 160; 
    private boolean startCount=false;
    private Timer timer=new Timer();
    private Timer colorTimer = new Timer();
    TextPractice code;
    class Helper extends TimerTask 
    { 
    private int choice;
    public Helper(int choice)
    {
        this.choice=choice;
    }
    boolean flag=true;
    @Override
    public void run() 
    { 
            switch(choice){
                case 1:
                    --counter;
                    if(counter == 0)
                    {
                        int correctChars = code.getNumberOfCorrectCharacters();
                        Map<String, Integer> errorChars = code.getErrorChar();
                       
                        JFrame resultForm=new Results(correctChars, errorChars);
                        resultForm.setVisible(true);
                        hideForm();
                        timer.cancel();
                    }
                    else
                    {
                        Practice_remainingTime.setText(counter+"");
                    }
                    break;
                    
                case 2:
                    
                    if(flag)
                        {
                            Practice_remainingTime.setForeground(Color.red);
                            flag = false;
                        }
                        else
                        {
                            Practice_remainingTime.setForeground(Color.BLUE);
                            flag=true;
                        }
                    break;
            }
        }
    } 
    /**
     * Creates new form Practice
     */
    private void hideForm()
    {
        this.setVisible(false);
    }
    public void showLines(int num)
    {
        Practice_originCodePane.setText("");
        String h="";
        ArrayList<String> lines=code.getLines(num);
        for( String l : lines)
        {
            String[]words=l.split(" ");
             for( String word : words)
                 h+=" <span>"+word+"</span>";
             h+=" <br> ";
        }
       Practice_originCodePane.setText(h);
       System.out.println(Practice_originCodePane.getText());

    }
    public Practice() {
        initComponents();
        this.setResizable(false);
        code =new TextPractice();
        HTMLEditorKit kit = new HTMLEditorKit();
        Practice_originCodePane.setEditorKit(kit);
    
        Practice_originCodePane.setContentType("text/html");
        Practice_languageName.setText(Settings.getLanguageName());
        code.setText(Settings.getLanguageCode());
        showLines(3);
        code.setNewLine();
        backgorundColorInput("orange",code.getCurrentWord());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        Practice_panel = new javax.swing.JPanel();
        Practice_practiceLabel = new javax.swing.JLabel();
        Practice_languageLabel = new javax.swing.JLabel();
        Practice_languageIndecatorLabel = new javax.swing.JLabel();
        Practice_remainingTimeLabel = new javax.swing.JLabel();
        Practice_timeIndecatorLabel = new javax.swing.JLabel();
        Practice_returnToMainMenuButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Practice_originCodePane = new javax.swing.JTextPane();
        Practice_remainingTime = new javax.swing.JLabel();
        Practice_languageName = new javax.swing.JLabel();
        Practice_inputCodeBox = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Practice_practiceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Practice_practiceLabel.setText("Practice !");

        Practice_languageLabel.setText("Language: ");

        Practice_remainingTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Practice_remainingTimeLabel.setText("Time Remaining: ");

        Practice_returnToMainMenuButton.setText("End");
        Practice_returnToMainMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Practice_returnToMainMenuButtonActionPerformed(evt);
            }
        });

        Practice_originCodePane.setEditable(false);
        Practice_originCodePane.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        jScrollPane3.setViewportView(Practice_originCodePane);

        Practice_remainingTime.setText("160");

        Practice_languageName.setText("Practice_languageName");

        Practice_inputCodeBox.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        Practice_inputCodeBox.setBorder(new javax.swing.border.MatteBorder(null));
        Practice_inputCodeBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Practice_inputCodeBoxKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout Practice_panelLayout = new javax.swing.GroupLayout(Practice_panel);
        Practice_panel.setLayout(Practice_panelLayout);
        Practice_panelLayout.setHorizontalGroup(
            Practice_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Practice_panelLayout.createSequentialGroup()
                .addGroup(Practice_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Practice_panelLayout.createSequentialGroup()
                        .addGap(241, 241, 241)
                        .addComponent(Practice_practiceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Practice_panelLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(Practice_languageIndecatorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Practice_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Practice_inputCodeBox)
                            .addComponent(jScrollPane3)
                            .addGroup(Practice_panelLayout.createSequentialGroup()
                                .addComponent(Practice_languageLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Practice_languageName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)
                                .addComponent(Practice_remainingTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Practice_remainingTime, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Practice_timeIndecatorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Practice_panelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Practice_returnToMainMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        Practice_panelLayout.setVerticalGroup(
            Practice_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Practice_panelLayout.createSequentialGroup()
                .addGroup(Practice_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Practice_panelLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(Practice_languageIndecatorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Practice_panelLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(Practice_timeIndecatorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Practice_practiceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Practice_panelLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(Practice_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Practice_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Practice_remainingTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Practice_remainingTime))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Practice_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Practice_languageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Practice_languageName)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Practice_inputCodeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(133, 133, 133)
                .addComponent(Practice_returnToMainMenuButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Practice_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(56, 56, 56))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Practice_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Practice_returnToMainMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Practice_returnToMainMenuButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new MainMenu().setVisible(true);
    }//GEN-LAST:event_Practice_returnToMainMenuButtonActionPerformed

    private void Practice_inputCodeBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Practice_inputCodeBoxKeyPressed
        if(startCount==false)
        {
        startCount=true;
        TimerTask task2 = new Helper(2);
        colorTimer.schedule(task2, 0, 500);
        
        TimerTask task = new Helper(1); 
        timer.schedule(task, 0 ,1000); 
        }
        int key = evt.getKeyCode();
        if(key == 32 || key == 10)//Space is 32 , Enter is 10
        {
            String inputWord=Practice_inputCodeBox.getText();
            if(inputWord.trim().equals(""))
                return;
            String correctWord=code.getCurrentWord();
            System.out.println(correctWord+" "+inputWord);
            Practice_inputCodeBox.setText("");
            boolean iscorrect=code.compareWord(correctWord.trim(), code.cleanString(inputWord).trim());
            if(iscorrect==true)
            {
                code.increase_numberOfCorrectCharacters(inputWord.length());
                colorInput("green",correctWord.trim());
                //color green
            }else 
            {
                colorInput("red",correctWord.trim());
                //color red;
            }
            if(code.increase_CurrentWord()==true)
            {
             
             showLines(3);//Thread
            }
            backgorundColorInput("orange",code.getCurrentWord());
            System.out.println(iscorrect);
        }

    }//GEN-LAST:event_Practice_inputCodeBoxKeyPressed
public void colorInput(String color,String word)
{
    word=code.cleanString(word);
    String colorText="<span style='color:"+color+"'>";
    String codeText=Practice_originCodePane.getText();
    codeText=codeText.replace("<span style=\"background-color: orange\">"+word+"</span>", colorText+word+"</span>");
    Practice_originCodePane.setText(codeText);
}

public void backgorundColorInput(String color,String word)
{
    word=code.cleanString(word);
    System.out.println("<span>"+word+"</span>");
    String colorText="<span style='background-color:"+color+"'>";
    String codeText=Practice_originCodePane.getText();
    int current=codeText.indexOf("<span>"+word+"</span>");
    String x=codeText.substring(0,current)+colorText+word+"</span>"+codeText.substring(current+6*2+word.length()+1,codeText.length());
    System.out.println(x);
    Practice_originCodePane.setText(x);
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Practice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Practice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Practice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Practice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {    
        public void run() {
                new Practice().setVisible(true);
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Practice_inputCodeBox;
    private javax.swing.JLabel Practice_languageIndecatorLabel;
    private javax.swing.JLabel Practice_languageLabel;
    private javax.swing.JLabel Practice_languageName;
    private javax.swing.JTextPane Practice_originCodePane;
    private javax.swing.JPanel Practice_panel;
    private javax.swing.JLabel Practice_practiceLabel;
    private javax.swing.JLabel Practice_remainingTime;
    private javax.swing.JLabel Practice_remainingTimeLabel;
    private javax.swing.JButton Practice_returnToMainMenuButton;
    private javax.swing.JLabel Practice_timeIndecatorLabel;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
