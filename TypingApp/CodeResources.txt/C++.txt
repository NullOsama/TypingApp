#include "RenderWidget.h"
#include <glut.h>
#include <QPainter>
#include <QTime>


RenderWidget::RenderWidget(QWidget *parent) : QWidget(parent)
{

}

QSize RenderWidget::minimumSizeHint() const
{
  return QSize(1800, 800);
}

QSize RenderWidget::sizeHint() const
{
	return QSize(1800, 800);
}

void RenderWidget::paintEvent(QPaintEvent *)
{
  QPainter painter(this);

 //    painter.setRenderHint(QPainter::Antialiasing, false);
  QColor color(0, 0, 0);
  painter.setPen(color);

   painter.drawRect(QRect(0, 0, width() , height() ));
	 //for (int x = 100; x < 300; ++x)
	//{
   //  painter.drawPoint(x, x);
  //  }

  /*myDrawLine(50, 70, 300, 370);*/

   // DrawCircle(600, 350, 200);
  // DrawArc(600, 350, -90, 90, 200);
   

  //DrawBicycle(700,400);

   //DrawLine_B(100, 100, 200, 100);

   DrawRose(200, 200);

}


void RenderWidget::myDrawLine(float x1, float y1, float x2, float y2)
{
  QPainter painter(this);

  //    painter.setRenderHint(QPainter::Antialiasing, false);
  painter.setPen(QColor(0, 0, 0));

  float m = (y2 - y1) / (x2 - x1);
  //  SetPixel(x1, y1, color);   // first point
  painter.drawPoint(x1, y1);

  if (m < 1)
  {
	float y = y1;
	for (int i = x1 + 1; i < x2; ++i)
	{
	  y = y + m;
	  //      SetPixel(i, round(y), color);
	  painter.drawPoint(i, round(y));
	}
  }
  else     // i.e., m > 1
  {
	float mm = 1 / m;
	float x = x1;
	for (int i = y1 + 1; i < y2; ++i)
	{
	  x = x + mm;
	  //      SetPixel(round(x), i, color);
	  painter.drawPoint(round(x), i);
	}
  }

  //  SetPixel(x2, y2, color);   // last point
  painter.drawPoint(x2, y2);
}

void RenderWidget::Draw_8_Points(float Xc, float Yc, float X, float Y)
{
	QPainter painter(this);
	painter.setPen(QColor(0, 0, 0));

	painter.drawPoint(Xc + X, Yc + Y);
	painter.drawPoint(Xc - X, Yc + Y);
	painter.drawPoint(Xc + X, Yc - Y);
	painter.drawPoint(Xc - X, Yc - Y);
	painter.drawPoint(Xc + Y, Yc + X);
	painter.drawPoint(Xc - Y, Yc + X);
	painter.drawPoint(Xc + Y, Yc - X);
	painter.drawPoint(Xc - Y, Yc - X);
}

void RenderWidget::DrawCircle(float Xc, float Yc, float Raduis)
{
	QPainter painter(this);
	painter.setPen(QColor(0,0,0));

	int d = 3 - 2 * Raduis,
		y = Raduis,
		x = 0;

	Draw_8_Points(Xc, Yc, x, y);

	while (y>=x) 
	{
		if (d <= 0)
		{
			d = d + 4 * x + 6;
		}
		else
		{
			d = d + 4 * (x - y) + 10;
			y--;
		}

		Draw_8_Points(Xc, Yc, x, y); 
		x++;
	}
}

void RenderWidget::DrawArc(float Xc, float Yc, float T1, float T2, float Raduis)
{
	QPainter painter(this);
	painter.setPen(QColor(0, 0, 0));

	double Pi = 3.14159265359,
		   theta = 0, inc = 1.0 / Raduis;
	int X, 
		Y;

	while (T1 < T2)
	{
		theta = T1 * Pi / 180;
		X = round(Xc + Raduis * cos(-theta));
		Y = round(Yc + Raduis * sin(-theta));
		painter.drawPoint(X,Y);
		T1 += inc;
	}
}

void RenderWidget::DrawVerticalLine(float x, float y1, float y2)
{
	QPainter painter(this);

	painter.setPen(QColor(0, 0, 0));

	if (y1 > y2)
	{
		for (int i = y1; i >= y2; i--)
		{
			painter.drawPoint(x, i);
		}
	}
	else
	{
		for (int i = y1; i <= y2; i++)
		{
			painter.drawPoint(x, i);
		}
	}
}

void RenderWidget::DrawCirclePolar(float Xc, float Yc, float Raduis)
{
	QPainter painter(this);
	painter.setPen(QColor(0, 0, 0));

	double PiOver180 = 3.14159265359 / 180 * -1,
		theta = 0,
		inc = 1.0 / (Raduis);

	int X, 
		Y;

	while (theta <= 360)
	{
		X = round(Xc + Raduis * cos(theta*PiOver180));
		Y = round(Yc + Raduis * sin(theta*PiOver180));
		painter.drawPoint(X, Y);
		theta += inc;
	}
}

void RenderWidget::DrawLine_B(float x1, float y1, float x2, float y2)
{
	QPainter painter(this);
	painter.setPen(QColor(0, 0, 0));

	float Dx = x2 - x1,
		Dy = y2 - y1,
		b = y1;

	float p = 2 * Dy*x1 - 2 * Dx*y1 + Dx * (2*y1 - 1);

	for (int i = x1; i <= x2; i++)
	{
		if (p < 0)
		{
			painter.drawPoint(i,y1);
			p = p + 2 * Dy + Dx * (2 * b - 1);
		}
		else
		{
			y1--;
			painter.drawPoint(i,y1);
			p = p + 3 * Dy - 2 * Dx + Dx * (2 * b - 1);
		}
	}
}

void RenderWidget::DrawRose(float Xc, float Yc)
{
	QPainter painter(this);
	painter.setPen(QColor(0, 0, 0));


	double PiOver180 = 3.14159265359 / 180,
		   theta = 0;

	float r = 1,
		  x = 0,
		  y = 0;


		while (theta <= 360)
		{
			r += cos(5 * theta*PiOver180);
			x = round(Xc + r * cos(theta*PiOver180));
			y = round(Yc + r * sin(theta*PiOver180));


			Draw_8_Points(Xc, Yc, x, y);

			/*Draw_8_Points(Xc, Yc, x - 1, y - 1);
			Draw_8_Points(Xc, Yc, x + 1, y + 1);
			Draw_8_Points(Xc, Yc, x + 1, y);
			Draw_8_Points(Xc, Yc, x - 1, y);
			Draw_8_Points(Xc, Yc, x, y + 1);
			Draw_8_Points(Xc, Yc, x, y - 1);*/

			//painter.drawPoint(x,y);

			theta += 0.1;
		}
}

void RenderWidget::DrawBicycle(float Xc,float Yc)
{

	double PiOver180 = 3.14159265359 / 180 * -1;

	int rightTinyX = Xc,
		rightTinyY = Yc,
		rightTinyRaduis = 20,
		rightAndLeftBigRaduis = rightTinyRaduis * 4,
		middleRaduis = rightTinyRaduis + 20;

	//Fisrt Layer Of Lines And Circles:

	DrawCircle(rightTinyX, rightTinyY, rightTinyRaduis);//Right Tiny One

	DrawCircle(rightTinyX, rightTinyY, rightAndLeftBigRaduis);//Right Big One

	DrawCircle(rightTinyX + 2 * 96, rightTinyY, middleRaduis);//Middle Tiny One

	DrawCircle(rightTinyX + 4 * 96, rightTinyY, rightAndLeftBigRaduis);//Left Big One

	myDrawLine(rightTinyX+rightTinyRaduis,rightTinyY, rightTinyX + rightTinyRaduis+132, rightTinyY);//Horezontal Line

	myDrawLine(round(rightTinyX + rightTinyRaduis * cos(45 * PiOver180)), round(rightTinyY + rightTinyRaduis * sin(45 * PiOver180)),
		rightTinyX + rightTinyRaduis * 6, rightTinyY - rightTinyRaduis * 6);//From Tiny To Up45


	myDrawLine(rightTinyX + rightTinyRaduis * 6, rightTinyY - rightTinyRaduis * 6,
		rightTinyX + rightTinyRaduis * 6 + 170, rightTinyY - rightTinyRaduis * 6);//From Up45 to Right


	myDrawLine(rightTinyX + rightTinyRaduis * 6, rightTinyY - rightTinyRaduis * 6,
		rightTinyX + 2 * 96 - middleRaduis + 12, rightTinyY - middleRaduis + 12);//From Up45 To Middle


	myDrawLine(rightTinyX + rightTinyRaduis * 6 - 20, rightTinyY - rightTinyRaduis * 6 - 25,
		rightTinyX + rightTinyRaduis * 6, rightTinyY - rightTinyRaduis * 6);//From Up To Up45
	

	myDrawLine(rightTinyX + rightTinyRaduis * 6 - 50, rightTinyY - rightTinyRaduis * 6 - 25,
		rightTinyX + rightTinyRaduis * 6+30, rightTinyY - rightTinyRaduis * 6 - 25);//Seat


	myDrawLine(rightTinyX + 2 * 96 - middleRaduis +75, rightTinyY - middleRaduis + 20,
		rightTinyX + rightTinyRaduis * 6 + 170, rightTinyY - rightTinyRaduis * 6);//From Middle To UpRight



	myDrawLine(rightTinyX + rightTinyRaduis * 6 + 170-24, rightTinyY - rightTinyRaduis * 6-33,
		rightTinyX + rightTinyRaduis * 6 + 170 + 83, rightTinyY - rightTinyRaduis * 6 + 102);//Arm to Front Wheel


	myDrawLine(rightTinyX + rightTinyRaduis * 6 + 170 - 24, rightTinyY - rightTinyRaduis * 6 - 33,
		rightTinyX + rightTinyRaduis * 6 + 170 - 24 + 30, rightTinyY - rightTinyRaduis * 6 - 33);//Arm Line


	DrawCircle(rightTinyX + 4 * 96, rightTinyY, rightTinyRaduis);//Front Tiny

	DrawVerticalLine(rightTinyX + 2 * 96, rightTinyY - middleRaduis, rightTinyY - middleRaduis - 25);//Vertical Up

	DrawVerticalLine(rightTinyX + 2 * 96, rightTinyY, rightTinyY + middleRaduis + 25);//Vertical Down

	myDrawLine(rightTinyX + 2 * 96 - 18, rightTinyY - middleRaduis - 25,
		rightTinyX + 2 * 96 + 18, rightTinyY - middleRaduis - 25);//Horezontal Up


	myDrawLine(rightTinyX + 2 * 96 - 18, rightTinyY - middleRaduis - 25 + 2 * middleRaduis + 25 + 25,
		rightTinyX + 2 * 96 + 18, rightTinyY - middleRaduis - 25 + 2 * middleRaduis + 25 + 25);//Horezontal Down


	DrawArc(rightTinyX + rightTinyRaduis * 6 + 170 - 24 + 30, rightTinyY - rightTinyRaduis * 6 - 33 + 10, -90, 90, 10);//Arm Arc

	DrawArc(rightTinyX + rightTinyRaduis * 6 + 30, rightTinyY - rightTinyRaduis * 6 - 25 + 5, -90, 90, 5);//Seat Arc

	//All Done, Now Increasing Thikness:


	int Thikness = 3,
		T = Thikness;

	while (Thikness >= -T)
	{
		DrawCirclePolar(rightTinyX, rightTinyY, rightTinyRaduis+Thikness);//Right Tiny One

		DrawCirclePolar(rightTinyX, rightTinyY, rightAndLeftBigRaduis+Thikness);//Right Big One

		DrawCirclePolar(rightTinyX + 2 * 96, rightTinyY, middleRaduis+Thikness);//Middle Tiny One

		DrawCirclePolar(rightTinyX + 4 * 96, rightTinyY, rightAndLeftBigRaduis+Thikness);//Left Big One

		myDrawLine(rightTinyX + rightTinyRaduis, rightTinyY + Thikness,
			rightTinyX + rightTinyRaduis + 132, rightTinyY + Thikness);//Horezontal Line


		myDrawLine(round(rightTinyX + rightTinyRaduis * cos(45 * PiOver180)), round(rightTinyY + rightTinyRaduis * sin(45 * PiOver180) - Thikness),
			rightTinyX + rightTinyRaduis * 6-Thikness, rightTinyY - rightTinyRaduis * 6);//From Tiny To Up45


		myDrawLine(rightTinyX + rightTinyRaduis * 6, rightTinyY - rightTinyRaduis * 6 - Thikness,
			rightTinyX + rightTinyRaduis * 6 + 170, rightTinyY - rightTinyRaduis * 6 - Thikness);//From Up45 to Right


		myDrawLine(rightTinyX + rightTinyRaduis * 6, rightTinyY - rightTinyRaduis * 6 - Thikness,
			rightTinyX + 2 * 96 - middleRaduis + 12, rightTinyY - middleRaduis + 12 - Thikness);//From Up45 To Middle


		myDrawLine(rightTinyX + rightTinyRaduis * 6 - 20, rightTinyY - rightTinyRaduis * 6 - 25 - Thikness,
			rightTinyX + rightTinyRaduis * 6, rightTinyY - rightTinyRaduis * 6 - Thikness);//From Up To Up45


		myDrawLine(rightTinyX + rightTinyRaduis * 6 - 50, rightTinyY - rightTinyRaduis * 6 - 25 - Thikness,
			rightTinyX + rightTinyRaduis * 6 + 30, rightTinyY - rightTinyRaduis * 6 - 25 - Thikness);//Seat


		myDrawLine(rightTinyX + 2 * 96 - middleRaduis + 75, rightTinyY - middleRaduis + 20 - Thikness,
			rightTinyX + rightTinyRaduis * 6 + 170, rightTinyY - rightTinyRaduis * 6 - Thikness);//From Middle To UpRight


		myDrawLine(rightTinyX + rightTinyRaduis * 6 + 170 - 24, rightTinyY - rightTinyRaduis * 6 - 33 - Thikness,
			rightTinyX + rightTinyRaduis * 6 + 170 + 83, rightTinyY - rightTinyRaduis * 6 + 102 - Thikness);//Arm to Front Wheel


		myDrawLine(rightTinyX + rightTinyRaduis * 6 + 170 - 24, rightTinyY - rightTinyRaduis * 6 - 33 - Thikness,
			rightTinyX + rightTinyRaduis * 6 + 170 - 24 + 30, rightTinyY - rightTinyRaduis * 6 - 33 - Thikness);//Arm Line


		DrawCirclePolar(rightTinyX + 4 * 96, rightTinyY, rightTinyRaduis + Thikness);//Front Tiny

		DrawVerticalLine(rightTinyX + 2 * 96 - Thikness, rightTinyY - middleRaduis, rightTinyY - middleRaduis - 25);//Vertical Up

		DrawVerticalLine(rightTinyX + 2 * 96 - Thikness, rightTinyY, rightTinyY + middleRaduis + 25);//Vertical Down

		myDrawLine(rightTinyX + 2 * 96 - 18, rightTinyY - middleRaduis - 25 - Thikness,
			rightTinyX + 2 * 96 + 18, rightTinyY - middleRaduis - 25 - Thikness);//Horezontal Up


		myDrawLine(rightTinyX + 2 * 96 - 18, rightTinyY - middleRaduis - 25 + 2 * middleRaduis + 25 + 25 - Thikness,
			rightTinyX + 2 * 96 + 18, rightTinyY - middleRaduis - 25 + 2 * middleRaduis + 25 + 25 - Thikness);//Horezontal Down


		DrawArc(rightTinyX + rightTinyRaduis * 6 + 170 - 24 + 30, rightTinyY - rightTinyRaduis * 6 - 33 + 10, -90, 90, 10 + Thikness);//Arm Arc

		DrawArc(rightTinyX + rightTinyRaduis * 6 + 30, rightTinyY - rightTinyRaduis * 6 - 25 + 5, -90, 90, 5 + Thikness);//Seat Arc

		Thikness--;
	}
}